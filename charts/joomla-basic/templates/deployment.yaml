---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joomla
  labels:
    app: joomla
spec:
  selector:
    matchLabels:
      app: joomla
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: joomla
        tier: frontend
    spec:
      initContainers:
      {{- if .Values.cli.enabled }}
      - name: joomla-bootstrap
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        volumeMounts:
        - name: joomla-persistent-storage
          mountPath: /var/www/html
        - name: log-volume
          mountPath: /var/log
        command:
          - sh
          - -c
          - |
            echo "$(date) Copying Joomla files to /var/www/html" | tee -a /var/log/joomla-bootstrap.log
            cp -rp /usr/src/joomla/* /var/www/html/
            echo "$(date) Joomla files copied to /var/www/html" | tee -a /var/log/joomla-bootstrap.log
            echo "$(date) ls -lah /var/www/html:"  | tee -a /var/log/joomla-bootstrap.log
            ls -lah /var/www/html | tee -a /var/log/joomla-bootstrap.log
      - name: mysql-check
        image: busybox
        volumeMounts:
        - name: log-volume
          mountPath: /var/log
        command:
          - sh
          - -c
          - |
            echo "${date} Checking MySQL service port" | tee -a /var/log/mysql-check.log
            until nc -z -w 10 {{ .Values.global.joomlaDbHost }} {{ .Values.global.joomlaDbPort }}; do
              echo "${date} MySQL service port is not ready yet" | tee -a /var/log/mysql-check.log
              sleep 5
            done
            echo "${date} MySQL service port is ready" | tee -a /var/log/mysql-check.log            
      - name: cli-installer
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        volumeMounts:
        - name: joomla-persistent-storage
          mountPath: /var/www/html
        - name: log-volume
          mountPath: /var/log
        command: 
          - bash
          - -c
          - |
            echo "$(date) Current working directory: $(pwd)" | tee -a /var/log/debug.log
            ls -lah /var/www/html/installation | tee -a /var/log/debug.log
            ls -lah /var/www/html | tee -a /var/log/debug.log
            if [ ! -f "/var/www/html/configuration.php" ]; then
              echo "$(date) Running Joomla CLI installer..." | tee -a /var/log/cli-installer.log
              php /var/www/html/installation/joomla.php install \
              --site-name={{ .Values.cli.siteName | quote }} \
              --admin-user={{ .Values.cli.adminUser | quote }} \
              --admin-username={{ .Values.cli.adminUsername | quote }} \
              --admin-password={{ .Values.cli.adminPassword | quote }} \
              --admin-email={{ .Values.cli.adminEmail | quote }} \
              --db-type={{ .Values.cli.dbType }} \
              --db-host={{ include "common.dbhostname" . }} \
              --db-user={{ include "common.dbuser" . }} \
              --db-pass={{ include "common.dbpassword" . }} \
              --db-name={{ include "common.dbname" . }} \
              --db-prefix={{ include "joomla.dbprefix" . }} \
              --db-encryption={{ include "joomla.dbencryption" . }} \
              --public-folder={{ .Values.cli.publicFolder }} | tee -a /var/log/cli-installer.log
              echo "$(date) Joomla installation completed." | tee -a /var/log/cli-installer.log
            else
              echo "$(data) Joomla already installed. Skipping installation." | tee -a /var/log/cli-installer.log
            fi
      {{- end }}
      containers:
      - image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: joomla
        volumeMounts:
        - name: joomla-persistent-storage
          mountPath: /var/www/html
        - name: log-volume
          mountPath: /var/log
        env:
        - name: JOOMLA_DB_HOST
          value: {{ include "common.dbhostname" . }}
        - name: JOOMLA_DB_NAME
          value: {{ include "common.dbname" . }}
        - name: JOOMLA_DB_USER
          value: {{ include "common.dbuser" . }}
        - name: JOOMLA_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: joomla-secret
              key: dbpassword
        ports:
        - containerPort: {{ include "joomla.service.port" . }}
          name: joomla
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: /index.php
            port: joomla
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
            tcpSocket:
              port: joomla
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
            httpGet:
              path: /index.php
              port: joomla
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
        {{- end }}
      volumes:
      - name: joomla-persistent-storage
        persistentVolumeClaim:
          claimName: joomla-pv-claim
      - name: log-volume
        emptyDir:
          sizeLimit: "50Mi"
      {{- if .Values.tolerationsEnabled }}
      tolerations:
      {{- range .Values.tolerations }}
      - key: {{ .key }}
        operator: {{ .operator }}
        value: {{ .value }}
        effect: {{ .effect }}
      {{- end }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      {{- end }}
      {{- if .Values.affinity.enabled }}
      affinity:
        nodeAffinity:
          {{- if and .Values.affinity.preferred (not .Values.affinity.required) }}
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- range .Values.affinity.preferredDuringSchedulingIgnoredDuringExecution }}
          - weight: {{ .weight }}
            preference:
              matchExpressions:
              - key: {{ .key }}
                operator: {{ .operator }}
                values:
                {{- range .values }}
                - {{ . }}
                {{- end }}
          {{- end }}
          {{- else if and .Values.affinity.required (not .Values.affinity.preferred) }}
          requiredDuringSchedulingIgnoredDuringExecution:
          {{- range .Values.affinity.requiredDuringSchedulingIgnoredDuringExecution }}
            nodeSelectorTerms:
              - matchExpressions:
                - key: {{ .key }}
                  operator: {{ .operator }}
                  values:
                  {{- range .values }}
                  - {{ . }}
                  {{- end }}
          {{- end }}
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            {{- range .Values.affinity.preferredDuringSchedulingIgnoredDuringExecution }}
            - weight: {{ .weight }}
              preference:
                matchExpressions:
                - key: {{ .key }}
                  operator: {{ .operator }}
                  values:
                  {{- range .values }}
                  - {{ . }}
                  {{- end }}
            {{- end }}
          {{- end }}
      {{- end }}